from pathlib import Path
from typing import Union
import numpy as np
import torch
from torch import nn as nn
import warnings
import math

def merge_dict(dict1, dict2):
    '''
    合并字典
    :return:
    '''
    if not isinstance(dict1,dict) or not isinstance(dict2,dict):
        return dict1
    for key,info in dict2.items():
        if key in dict1:
            if isinstance(dict1[key], dict):
                dict1[key] = merge_dict(dict1[key],info)
            elif isinstance(dict1[key], list):
                # dict1[key].extend(info)
                dict1[key] = info
            else:
                dict1[key] = info
        else :
            dict1[key] = info
    return dict1

def shuffle_rows(arr):
    idxs = np.argsort(np.random.uniform(size=arr.shape), axis=-1)
    return arr[np.arange(arr.shape[0])[:, None], idxs]

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor

def trunc_normal_(tensor, mean = 0., std = 1., a = -2., b = 2.):
    r"""Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.

    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value

    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)

def get_affine_params(ensemble_size, in_features, out_features, device='cpu'):
    w = torch.empty(ensemble_size, in_features, out_features, device=device)
    torch.nn.init.trunc_normal_(w, std=1.0 / (2.0 * np.sqrt(in_features)))
    w = nn.Parameter(w)
    b = nn.Parameter(torch.zeros(ensemble_size, 1, out_features, dtype=torch.float32, device=device))

    return w, b

def swish(x):
    return x * torch.sigmoid(x)

def new_run_directory(path: Union[str, Path]):
    path = Path(path)
    run_name = path.name
    previous_runs = path.parent.glob(f'{run_name}*')
    # Remove run_name from run directories
    prev_run_nums = map(lambda prev_path: prev_path.name[len(run_name):], previous_runs)
    # Remove those runs that do not have a number at the end
    prev_run_nums = filter(lambda prev_run_num: prev_run_num.isdigit(), prev_run_nums)
    # Convert to int and sort
    prev_run_nums = sorted(map(lambda prev_run_num: int(prev_run_num), prev_run_nums))
    # If there are any previous runs
    if prev_run_nums:
        new_run_num = int(prev_run_nums[-1]) + 1
    else:
        new_run_num = 1
    new_run_dir = Path(str(path) + str(new_run_num))
    return new_run_dir

